#!/usr/bin/env python
"""
CMORisation script for variable {{ variable }}
Generated automatically by ACCESS-MOPPeR batch processing
"""

import os
import glob
import sys
from pathlib import Path
import dask.distributed as dd

# Add package to path
sys.path.insert(0, '{{ package_path }}')

from access_mopper import ACCESS_ESM_CMORiser
from access_mopper.tracking import TaskTracker

def main():
    # Start a local Dask client for this job
    client = dd.Client(
        processes=False,
        threads_per_worker=1,
        n_workers=int(os.environ.get('PBS_NCPUS', '1'))
    )
    print(f'Dask dashboard: {client.dashboard_link}')

    try:
        # Get values from environment
        variable = os.environ['VARIABLE']
        db_path = os.environ['CMOR_TRACKER_DB']
        experiment_id = os.environ['EXPERIMENT_ID']
        source_id = os.environ['SOURCE_ID']
        variant_label = os.environ['VARIANT_LABEL']
        grid_label = os.environ['GRID_LABEL']
        activity_id = os.environ['ACTIVITY_ID']
        input_folder = os.environ['INPUT_FOLDER']
        output_folder = os.environ['OUTPUT_FOLDER']
        drs_root = os.environ.get('DRS_ROOT') or None

        # File patterns
        file_patterns = {{ config.get('file_patterns', {}) | tojson }}

        pattern = file_patterns.get(variable)
        if not pattern:
            raise ValueError(f'No pattern found for variable {variable}')

        full_pattern = str(input_folder + pattern)
        input_files = glob.glob(full_pattern)
        if not input_files:
            raise ValueError(f'No files found for pattern {full_pattern}')

        print(f'Processing {variable} with {len(input_files)} files')

        # Initialize tracker
        db_name = f"cmor_tasks_{variable.replace('.', '_')}.db"
        db_path = Path(os.environ['CMOR_TRACKER_DB']).parent / db_name
        tracker = TaskTracker(db_path)
        tracker.add_task(variable, experiment_id)

        if tracker.is_done(variable, experiment_id):
            print(f'Skipped: {variable} (already done)')
            return

        tracker.mark_running(variable, experiment_id)

        # Run CMORisation
        cmoriser = ACCESS_ESM_CMORiser(
            input_paths=input_files,
            compound_name=variable,
            experiment_id=experiment_id,
            source_id=source_id,
            variant_label=variant_label,
            grid_label=grid_label,
            activity_id=activity_id,
            output_path=output_folder,
            drs_root=drs_root,
        )

        cmoriser.run()
        cmoriser.write()

        tracker.mark_done(variable, experiment_id)
        print(f'Completed: {variable}')

    except Exception as e:
        print(f'Error processing {variable}: {e}', file=sys.stderr)
        try:
            tracker.mark_failed(variable, experiment_id, str(e))
        except:
            pass
        sys.exit(1)
    finally:
        client.close()

if __name__ == '__main__':
    main()
